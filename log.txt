sq/sq.go
stacktrace/stacktrace.go
schema.go
id.go
object_storage.go
fs.go
fs_directory.go
fs_database.go
fs_sftp.go
fs_replicated.go
mailer.go
creation_time.go
creation_time_darwin.go
creation_time_linux.go
creation_time_windows.go
embed/*
static/*
notebrew.go
developer_mode.go
internal/highlighting/highlighting.go
internal/highlighting/markdownmath.go
site_generator.go
site_json.go
postlist_json.go
rootdirectory.go
directory.go
image.go
createsite.go
deletesite.go
createfolder.go
createfile.go
delete.go
search.go
rename.go
uploadfile.go
clipboard.go
applytheme.go
calculatestorage.go
cancelexport.go
cancelimport.go
changepassword.go
createsession.go
deletesession.go
export.go
exports.go
import.go
imports.go
invite.go
login.go
logout.go
pin.go
profile.go
resetpassword.go
resettheme.go
unpin.go
updateemail.go
updateprofile.go
serve_http.go
cli/config_cmd.go
cli/cli.go
cli/createinvite_cmd.go
cli/createsite_cmd.go
cli/createuser_cmd.go
cli/deleteinvite_cmd.go
cli/deletesite_cmd.go
cli/deleteuser_cmd.go
cli/hashpassword_cmd.go
cli/permissions_cmd.go
cli/resetpassword_cmd.go
cli/sqlite_cgo.go
cli/sqlite_nocgo.go
cli/start_cmd.go
cli/status_cmd.go
cli/stop_cmd.go
notebrew/main.go
gui/main.go

TODO: add a -verbose flag to figure out why it is hanging
TODO: add a flag to immediately provision a certificate into a directory of our choosing so that we can immediately test out the setup (surely we can simply tweak the cert directory for this?)
TODO: add a way to disable wildcard certficates (or we can just disable dns config?)

TODO: file permalinks, so that you can always link to a file without worrying about it being renamed or having to embed a unique search string within its contents.
- /files/{sitePrefix}/lookup/ => basic HTML form with <input name=fileID>, which additional fileID fields can be added via JavaScript. Does a basic GET request of /files/{sitePrefix}/lookup/?fileID=xxxx&fileID=xxxx&fileID=xxxxx.
- Without ?api query param, it lists a bunch of files in the order their fileIDs appear in, just like in the /search page (meaning with image, video and text previews as well).
- With the ?api query param, it lists the output as JSON (which can be parsed by a client). This is used by smart clients doing client-side sync to check if a missing file in a directory was relocated or deleted, by querying for that fileID in /lookup and seeing if it exists and where its new filePath is.

TODO: file.go to support both files and images, always support previous and next files. And furthermore, this should follow the sort and order cookies (can be overridden with a query param, this is how API clients can use it).

TODO: wtf SQLite supports showing which column and the offset within the column that matched an FTS query. And it also supports substring matches as well, not just tokens with the trigram extension (I can use this to fix the problem of exact word matching). The only problem is, once I dabble into trigram matching can its behavior be replicated identically to Postgres and MySQL as well or does only SQLite support this feature?
https://x.com/terronk/status/1902743529128186258 "Donâ€™t use Apple Notes to store anything you ever need to find again."
https://www.sqlite.org/fts5.html#the_detail_option
https://andrewmara.com/blog/faster-sqlite-like-queries-using-fts5-trigram-indexes

TODO: /files/lookup/?fileID=abcde => [{"fileID":"","filePath":"","creationTime":"",...}]
    - when smart client enters a directory, it loads entries from its local database and makes a call to directories.go at the same time using the same view params.
    - for each deleted file, it calls files/lookup/fileID=xxxx in order to find if the file was deleted or just moved. if it was deleted, move it to the trash. if it was moved, create a new file entry.
        - if the deleted file is a folder, oh my god we need to recurse into the folder and do the same for *all* its children. recursively. this will take up a lot of time for what was supposed to be a simple directory visit. hopefully we will rarely encounter this because most missing files should be straight up deleted.
        - actually, no. we don't have to do this recursively. we can short-circuit/shortcut this by checking if the destination path exists. If it doesn't, we can simply move the entire folder over (this is because folders also have fileIDs! if a folder with a fileID turns up at a different filePath, we can assume it was moved over).
    - for each added file, it adds a new file entry to the local database (but with NULL content).
TODO: file groups e.g. (01234567) filename.txt

TODO: change sq to use Go 1.23's range over iterator funcs (we will need to drastically change the error handling of all code that uses a cursor).
TODO: add database test scaffolding (you don't need to write all tests for all handlers yet, but you need to establish what a test scaffolding that goes through all database dialects would look like).
TODO: add ability to showcase blogs on the site? add ability to showcase posts and vote on posts?

mobile app: when you share a social media post (twitter threads reddit), you are given the option to create a new file or append to an existing file. when you append, a "----" is added before appending the rest of the contents.

mobile app: separate the local file handling code and the server sync code with an events system. when a file is created updated deleted copied or moved, an event is emitted and the server synchronisation code kicks in. the local file handling code never has any idea it is communicating with an external server. things just magically appear and disappear in the database.

look into creating an offline-first app
- dumb server, smart client
- every file has a modTime and a serverModTime. The serverModTime is compared with the modTime from the server (together with the file hash) to determine if a file has gone out of sync with the server. If so, the latest copy will always take the place of the filename and the older copy will occupy the filename <filename>-YYYY-MM-DD-HHMMSS-<base32UUIDHash>.<ext>.
- each folder has a "lastSynced" timestamp. The user can see this and choose to sync a folder at any time, which kicks off a background job that iterates through the server-side folder using JSON API calls.
    - if a file/folder was deleted on the server, move it to the recycling bin in the client
    - if a file/folder was added on the server, pull it into the client.
    - if a file was changed on the server, compare the file
    - it is always up to the client to pull the latest changes. the server never pushes updates to the client (because it is dumb and has no idea the clients exist). if the user never updates a folder, they will never see new files added on the server. the user must have some clue whether or not new files or changes
