package cli

import (
	"bytes"
	"database/sql"
	"encoding/json"
	"errors"
	"flag"
	"fmt"
	"io"
	"io/fs"
	"os"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
)

const configHelp = `Usage:
  notebrew config [KEY]                           # print the value of the key
  notebrew config [KEY] [VALUE]                   # set the value of the key
  notebrew config port                            # prints the value of port
  notebrew config port 443                        # sets the value of port to 443
  notebrew config database                        # prints the database configuration
  notebrew config database '{"dialect":"sqlite"}' # sets the database configuration
  notebrew config database.dialect sqlite         # sets the database dialect to sqlite

Keys:
  notebrew config port          # (txt) Port that notebrew listens on.
  notebrew config cmsdomain     # (txt) Domain that the CMS is served on.
  notebrew config contentdomain # (txt) Domain that the content is served on.
  notebrew config cdndomain     # (txt) Domain of the Content Delivery Network (CDN), if any.
  notebrew config imgcmd        # (txt) Image preprocessing command.
  notebrew config maxminddb     # (txt) Location of the MaxMind GeoLite2/GeoIP2 mmdb file.
  notebrew config database      # (json) Database configuration.
  notebrew config files         # (json) File system configuration.
  notebrew config objects       # (json) Object storage configuration.
  notebrew config captcha       # (json) Captcha configuration.
  notebrew config smtp          # (json) SMTP configuration.
  notebrew config proxy         # (json) Proxy configuration.
  notebrew config dns           # (json) DNS provider configuration.
  notebrew config certmagic     # (txt) certmagic directory for storing autogenerated SSL certificates.
To view notebrew's current settings, run ` + "`notebrew status`" + `.
`

type ConfigCmd struct {
	ConfigDir string
	Stdout    io.Writer
	Stderr    io.Writer
	Key       sql.NullString
	Value     sql.NullString
}

var followerPattern = regexp.MustCompile(`^followers\[(?P<followerIndex>\d+)\](?:\.(?P<tail>\w+))?$`)

func ConfigCommand(configDir string, args ...string) (*ConfigCmd, error) {
	var cmd ConfigCmd
	cmd.ConfigDir = configDir
	flagset := flag.NewFlagSet("", flag.ContinueOnError)
	flagset.Usage = func() {
		io.WriteString(flagset.Output(), configHelp)
	}
	err := flagset.Parse(args)
	if err != nil {
		return nil, err
	}
	args = flagset.Args()
	switch len(args) {
	case 0:
		break
	case 1:
		cmd.Key = sql.NullString{String: args[0], Valid: true}
	case 2:
		cmd.Key = sql.NullString{String: args[0], Valid: true}
		if strings.HasPrefix(args[1], "-") {
			return &cmd, nil
		}
		cmd.Value = sql.NullString{String: args[1], Valid: true}
	default:
		return nil, fmt.Errorf("too many arguments (max 2)")
	}
	return &cmd, nil
}

func (cmd *ConfigCmd) Run() error {
	if cmd.Stdout == nil {
		cmd.Stdout = os.Stdout
	}
	if cmd.Stderr == nil {
		cmd.Stderr = os.Stderr
	}
	if !cmd.Key.Valid {
		io.WriteString(cmd.Stderr, configHelp)
		return nil
	}
	if cmd.Value.String == "nil" {
		cmd.Value.String = ""
	}
	head, tail, _ := strings.Cut(cmd.Key.String, ".")
	switch head {
	case "":
		return fmt.Errorf("key cannot be empty")
	case "port":
		if cmd.Value.Valid {
			err := os.WriteFile(filepath.Join(cmd.ConfigDir, "port.txt"), []byte(cmd.Value.String), 0644)
			if err != nil {
				return err
			}
		} else {
			b, err := os.ReadFile(filepath.Join(cmd.ConfigDir, "port.txt"))
			if err != nil && !errors.Is(err, fs.ErrNotExist) {
				return err
			}
			io.WriteString(cmd.Stdout, string(bytes.TrimSpace(b))+"\n")
		}
	case "cmsdomain":
		if cmd.Value.Valid {
			err := os.WriteFile(filepath.Join(cmd.ConfigDir, "cmsdomain.txt"), []byte(cmd.Value.String), 0644)
			if err != nil {
				return err
			}
		} else {
			b, err := os.ReadFile(filepath.Join(cmd.ConfigDir, "cmsdomain.txt"))
			if err != nil && !errors.Is(err, fs.ErrNotExist) {
				return err
			}
			io.WriteString(cmd.Stdout, string(bytes.TrimSpace(b))+"\n")
		}
	case "contentdomain":
		if cmd.Value.Valid {
			err := os.WriteFile(filepath.Join(cmd.ConfigDir, "contentdomain.txt"), []byte(cmd.Value.String), 0644)
			if err != nil {
				return err
			}
		} else {
			b, err := os.ReadFile(filepath.Join(cmd.ConfigDir, "contentdomain.txt"))
			if err != nil && !errors.Is(err, fs.ErrNotExist) {
				return err
			}
			io.WriteString(cmd.Stdout, string(bytes.TrimSpace(b))+"\n")
		}
	case "cdndomain":
		if cmd.Value.Valid {
			err := os.WriteFile(filepath.Join(cmd.ConfigDir, "cdndomain.txt"), []byte(cmd.Value.String), 0644)
			if err != nil {
				return err
			}
		} else {
			b, err := os.ReadFile(filepath.Join(cmd.ConfigDir, "cdndomain.txt"))
			if err != nil && !errors.Is(err, fs.ErrNotExist) {
				return err
			}
			io.WriteString(cmd.Stdout, string(bytes.TrimSpace(b))+"\n")
		}
	case "imgcmd":
		if cmd.Value.Valid {
			err := os.WriteFile(filepath.Join(cmd.ConfigDir, "imgcmd.txt"), []byte(cmd.Value.String), 0644)
			if err != nil {
				return err
			}
		} else {
			b, err := os.ReadFile(filepath.Join(cmd.ConfigDir, "imgcmd.txt"))
			if err != nil && !errors.Is(err, fs.ErrNotExist) {
				return err
			}
			io.WriteString(cmd.Stdout, string(bytes.TrimSpace(b))+"\n")
		}
	case "maxminddb":
		if cmd.Value.Valid {
			err := os.WriteFile(filepath.Join(cmd.ConfigDir, "maxminddb.txt"), []byte(cmd.Value.String), 0644)
			if err != nil {
				return err
			}
		} else {
			b, err := os.ReadFile(filepath.Join(cmd.ConfigDir, "maxminddb.txt"))
			if err != nil && !errors.Is(err, fs.ErrNotExist) {
				return err
			}
			io.WriteString(cmd.Stdout, string(bytes.TrimSpace(b))+"\n")
		}
	case "database":
		b, err := os.ReadFile(filepath.Join(cmd.ConfigDir, "database.json"))
		if err != nil && !errors.Is(err, fs.ErrNotExist) {
			return err
		}
		var databaseConfig DatabaseConfig
		if len(b) > 0 {
			decoder := json.NewDecoder(bytes.NewReader(b))
			decoder.DisallowUnknownFields()
			err = decoder.Decode(&databaseConfig)
			if err != nil && tail != "" {
				return fmt.Errorf("%s: %w", filepath.Join(cmd.ConfigDir, "database.json"), err)
			}
		}
		if databaseConfig.Params == nil {
			databaseConfig.Params = map[string]string{}
		}
		switch tail {
		case "":
			if cmd.Value.Valid {
				var newDatabaseConfig DatabaseConfig
				if cmd.Value.String != "" {
					decoder := json.NewDecoder(strings.NewReader(cmd.Value.String))
					decoder.DisallowUnknownFields()
					err := decoder.Decode(&newDatabaseConfig)
					if err != nil {
						return fmt.Errorf("invalid value: %w", err)
					}
				}
				databaseConfig = newDatabaseConfig
			} else {
				io.WriteString(cmd.Stderr, databaseHelp)
				encoder := json.NewEncoder(cmd.Stdout)
				encoder.SetIndent("", "  ")
				encoder.SetEscapeHTML(false)
				err := encoder.Encode(databaseConfig)
				if err != nil {
					return err
				}
			}
		case "dialect":
			if cmd.Value.Valid {
				databaseConfig.Dialect = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, databaseConfig.Dialect+"\n")
			}
		case "filePath":
			if cmd.Value.Valid {
				databaseConfig.FilePath = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, databaseConfig.FilePath+"\n")
			}
		case "user":
			if cmd.Value.Valid {
				databaseConfig.User = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, databaseConfig.User+"\n")
			}
		case "password":
			if cmd.Value.Valid {
				databaseConfig.Password = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, databaseConfig.Password+"\n")
			}
		case "host":
			if cmd.Value.Valid {
				databaseConfig.Host = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, databaseConfig.Host+"\n")
			}
		case "port":
			if cmd.Value.Valid {
				databaseConfig.Port = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, databaseConfig.Port+"\n")
			}
		case "dbName":
			if cmd.Value.Valid {
				databaseConfig.Port = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, databaseConfig.DBName+"\n")
			}
			databaseConfig.DBName = cmd.Value.String
		case "params":
			if cmd.Value.Valid {
				var params map[string]string
				if cmd.Value.String != "" {
					decoder := json.NewDecoder(strings.NewReader(cmd.Value.String))
					decoder.DisallowUnknownFields()
					err := decoder.Decode(&params)
					if err != nil {
						return fmt.Errorf("invalid value: %w", err)
					}
				}
				databaseConfig.Params = params
			} else {
				encoder := json.NewEncoder(cmd.Stdout)
				encoder.SetIndent("", "  ")
				encoder.SetEscapeHTML(false)
				err := encoder.Encode(databaseConfig.Params)
				if err != nil {
					return err
				}
			}
		case "maxOpenConns":
			if cmd.Value.Valid {
				maxOpenConns, err := strconv.Atoi(cmd.Value.String)
				if err != nil {
					return fmt.Errorf("invalid value: %w", err)
				}
				databaseConfig.MaxOpenConns = maxOpenConns
			} else {
				io.WriteString(cmd.Stdout, strconv.Itoa(databaseConfig.MaxOpenConns)+"\n")
			}
		case "maxIdleConns":
			if cmd.Value.Valid {
				maxIdleConns, err := strconv.Atoi(cmd.Value.String)
				if err != nil {
					return fmt.Errorf("invalid value: %w", err)
				}
				databaseConfig.MaxIdleConns = maxIdleConns
			} else {
				io.WriteString(cmd.Stdout, strconv.Itoa(databaseConfig.MaxIdleConns)+"\n")
			}
		case "connMaxLifetime":
			if cmd.Value.Valid {
				databaseConfig.ConnMaxLifetime = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, databaseConfig.ConnMaxLifetime+"\n")
			}
		case "connMaxIdleTime":
			if cmd.Value.Valid {
				databaseConfig.ConnMaxIdleTime = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, databaseConfig.ConnMaxIdleTime+"\n")
			}
		default:
			io.WriteString(cmd.Stderr, databaseHelp)
			return fmt.Errorf("%s: invalid key %q", cmd.Key.String, tail)
		}
		if cmd.Value.Valid {
			file, err := os.OpenFile(filepath.Join(cmd.ConfigDir, "database.json"), os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
			if err != nil {
				return err
			}
			defer file.Close()
			encoder := json.NewEncoder(file)
			encoder.SetIndent("", "  ")
			encoder.SetEscapeHTML(false)
			err = encoder.Encode(databaseConfig)
			if err != nil {
				return err
			}
			err = file.Close()
			if err != nil {
				return err
			}
		}
	case "files":
		b, err := os.ReadFile(filepath.Join(cmd.ConfigDir, "files.json"))
		if err != nil && !errors.Is(err, fs.ErrNotExist) {
			return err
		}
		var filesConfig FilesConfig
		if len(b) > 0 {
			decoder := json.NewDecoder(bytes.NewReader(b))
			decoder.DisallowUnknownFields()
			err = decoder.Decode(&filesConfig)
			if err != nil && tail != "" {
				return fmt.Errorf("%s: %w", filepath.Join(cmd.ConfigDir, "files.json"), err)
			}
		}
		if filesConfig.Params == nil {
			filesConfig.Params = map[string]string{}
		}
		if filesConfig.Followers == nil {
			filesConfig.Followers = []FSConfig{}
		}
		switch tail {
		case "":
			if cmd.Value.Valid {
				var newFilesConfig FilesConfig
				if cmd.Value.String != "" {
					decoder := json.NewDecoder(strings.NewReader(cmd.Value.String))
					decoder.DisallowUnknownFields()
					err := decoder.Decode(&newFilesConfig)
					if err != nil {
						return err
					}
				}
				filesConfig = newFilesConfig
			} else {
				io.WriteString(cmd.Stderr, filesHelp)
				encoder := json.NewEncoder(cmd.Stdout)
				encoder.SetIndent("", "  ")
				encoder.SetEscapeHTML(false)
				err := encoder.Encode(filesConfig)
				if err != nil {
					return err
				}
			}
		case "provider":
			if cmd.Value.Valid {
				filesConfig.Provider = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, filesConfig.Provider+"\n")
			}
		case "authenticationMethod":
			if cmd.Value.Valid {
				filesConfig.AuthenticationMethod = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, filesConfig.AuthenticationMethod+"\n")
			}
		case "tempDir":
			if cmd.Value.Valid {
				filesConfig.TempDir = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, filesConfig.TempDir+"\n")
			}
		case "dialect":
			if cmd.Value.Valid {
				filesConfig.Dialect = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, filesConfig.Dialect+"\n")
			}
		case "filePath":
			if cmd.Value.Valid {
				filesConfig.FilePath = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, filesConfig.FilePath+"\n")
			}
		case "user":
			if cmd.Value.Valid {
				filesConfig.User = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, filesConfig.User+"\n")
			}
		case "password":
			if cmd.Value.Valid {
				filesConfig.Password = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, filesConfig.Password+"\n")
			}
		case "host":
			if cmd.Value.Valid {
				filesConfig.Host = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, filesConfig.Host+"\n")
			}
		case "port":
			if cmd.Value.Valid {
				filesConfig.Port = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, filesConfig.Port+"\n")
			}
		case "dbName":
			if cmd.Value.Valid {
				filesConfig.DBName = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, filesConfig.DBName+"\n")
			}
		case "params":
			if cmd.Value.Valid {
				var params map[string]string
				if cmd.Value.String != "" {
					decoder := json.NewDecoder(strings.NewReader(cmd.Value.String))
					decoder.DisallowUnknownFields()
					err := decoder.Decode(&params)
					if err != nil {
						return err
					}
				}
				filesConfig.Params = params
			} else {
				encoder := json.NewEncoder(cmd.Stdout)
				encoder.SetIndent("", "  ")
				encoder.SetEscapeHTML(false)
				err := encoder.Encode(filesConfig.Params)
				if err != nil {
					return err
				}
			}
		case "maxOpenConns":
			if cmd.Value.Valid {
				maxOpenConns, err := strconv.Atoi(cmd.Value.String)
				if err != nil {
					return fmt.Errorf("invalid value: %w", err)
				}
				filesConfig.MaxOpenConns = maxOpenConns
			} else {
				io.WriteString(cmd.Stdout, strconv.Itoa(filesConfig.MaxOpenConns)+"\n")
			}
		case "maxIdleConns":
			if cmd.Value.Valid {
				maxIdleConns, err := strconv.Atoi(cmd.Value.String)
				if err != nil {
					return fmt.Errorf("invalid value: %w", err)
				}
				filesConfig.MaxIdleConns = maxIdleConns
			} else {
				io.WriteString(cmd.Stdout, strconv.Itoa(filesConfig.MaxIdleConns)+"\n")
			}
		case "connMaxLifetime":
			if cmd.Value.Valid {
				filesConfig.ConnMaxLifetime = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, filesConfig.ConnMaxLifetime+"\n")
			}
		case "connMaxIdleTime":
			if cmd.Value.Valid {
				filesConfig.ConnMaxIdleTime = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, filesConfig.ConnMaxIdleTime+"\n")
			}
		case "followers":
			if cmd.Value.Valid {
				var newFollowers []FSConfig
				if cmd.Value.String != "" {
					decoder := json.NewDecoder(strings.NewReader(cmd.Value.String))
					decoder.DisallowUnknownFields()
					err := decoder.Decode(&newFollowers)
					if err != nil {
						return err
					}
				}
				filesConfig.Followers = newFollowers
			} else {
				encoder := json.NewEncoder(cmd.Stdout)
				encoder.SetIndent("", "  ")
				encoder.SetEscapeHTML(false)
				err := encoder.Encode(filesConfig.Followers)
				if err != nil {
					return err
				}
			}
		default:
			matches := followerPattern.FindStringSubmatch(tail)
			if len(matches) == 0 {
				io.WriteString(cmd.Stderr, filesHelp)
				return fmt.Errorf("%s: invalid key %q", cmd.Key.String, tail)
			}
			followerIndex, err := strconv.Atoi(matches[followerPattern.SubexpIndex("followerIndex")])
			if err != nil {
				return fmt.Errorf("%s: %s: %q is not an integer", cmd.Key.String, tail, matches[followerPattern.SubexpIndex("followerIndex")])
			}
			if followerIndex < 0 {
				return fmt.Errorf("%s: %s: follower index cannot be less than 0", cmd.Key.String, tail)
			}
			if followerIndex > 9 {
				return fmt.Errorf("%s: %s: follower index cannot be greater than 9", cmd.Key.String, tail)
			}
			var fsConfig FSConfig
			if cmd.Value.Valid {
				if followerIndex >= len(filesConfig.Followers) {
					if followerIndex >= cap(filesConfig.Followers) {
						followers := make([]FSConfig, followerIndex+1)
						copy(followers, filesConfig.Followers)
						filesConfig.Followers = followers
					} else {
						filesConfig.Followers = filesConfig.Followers[:followerIndex]
					}
				}
				if filesConfig.Followers[followerIndex].Params == nil {
					filesConfig.Followers[followerIndex].Params = make(map[string]string)
				}
			} else {
				if followerIndex < len(filesConfig.Followers) {
					fsConfig = filesConfig.Followers[followerIndex]
					if fsConfig.Params == nil {
						fsConfig.Params = make(map[string]string)
					}
				}
			}
			switch matches[followerPattern.SubexpIndex("tail")] {
			case "":
				if cmd.Value.Valid {
					var newFSConfig FSConfig
					if cmd.Value.String != "" {
						decoder := json.NewDecoder(strings.NewReader(cmd.Value.String))
						decoder.DisallowUnknownFields()
						err := decoder.Decode(&newFSConfig)
						if err != nil {
							return err
						}
					}
					filesConfig.Followers[followerIndex] = newFSConfig
				} else {
					io.WriteString(cmd.Stderr, filesHelp)
					encoder := json.NewEncoder(cmd.Stdout)
					encoder.SetIndent("", "  ")
					encoder.SetEscapeHTML(false)
					err := encoder.Encode(fsConfig)
					if err != nil {
						return err
					}
				}
			case "provider":
				if cmd.Value.Valid {
					filesConfig.Followers[followerIndex].Provider = cmd.Value.String
				} else {
					io.WriteString(cmd.Stdout, fsConfig.Provider+"\n")
				}
			case "authenticationMethod":
				if cmd.Value.Valid {
					filesConfig.Followers[followerIndex].AuthenticationMethod = cmd.Value.String
				} else {
					io.WriteString(cmd.Stdout, fsConfig.AuthenticationMethod+"\n")
				}
			case "tempDir":
				if cmd.Value.Valid {
					filesConfig.Followers[followerIndex].TempDir = cmd.Value.String
				} else {
					io.WriteString(cmd.Stdout, fsConfig.TempDir+"\n")
				}
			case "dialect":
				if cmd.Value.Valid {
					filesConfig.Followers[followerIndex].Dialect = cmd.Value.String
				} else {
					io.WriteString(cmd.Stdout, fsConfig.Dialect+"\n")
				}
			case "filePath":
				if cmd.Value.Valid {
					filesConfig.Followers[followerIndex].FilePath = cmd.Value.String
				} else {
					io.WriteString(cmd.Stdout, fsConfig.FilePath+"\n")
				}
			case "user":
				if cmd.Value.Valid {
					filesConfig.Followers[followerIndex].User = cmd.Value.String
				} else {
					io.WriteString(cmd.Stdout, fsConfig.User+"\n")
				}
			case "password":
				if cmd.Value.Valid {
					filesConfig.Followers[followerIndex].Password = cmd.Value.String
				} else {
					io.WriteString(cmd.Stdout, fsConfig.Password+"\n")
				}
			case "host":
				if cmd.Value.Valid {
					filesConfig.Followers[followerIndex].Host = cmd.Value.String
				} else {
					io.WriteString(cmd.Stdout, fsConfig.Host+"\n")
				}
			case "port":
				if cmd.Value.Valid {
					filesConfig.Followers[followerIndex].Port = cmd.Value.String
				} else {
					io.WriteString(cmd.Stdout, fsConfig.Port+"\n")
				}
			case "dbName":
				if cmd.Value.Valid {
					filesConfig.Followers[followerIndex].DBName = cmd.Value.String
				} else {
					io.WriteString(cmd.Stdout, fsConfig.DBName+"\n")
				}
			case "params":
				if cmd.Value.Valid {
					var params map[string]string
					if cmd.Value.String != "" {
						decoder := json.NewDecoder(strings.NewReader(cmd.Value.String))
						decoder.DisallowUnknownFields()
						err := decoder.Decode(&params)
						if err != nil {
							return err
						}
					}
					filesConfig.Followers[followerIndex].Params = params
				} else {
					encoder := json.NewEncoder(cmd.Stdout)
					encoder.SetIndent("", "  ")
					encoder.SetEscapeHTML(false)
					err := encoder.Encode(fsConfig.Params)
					if err != nil {
						return err
					}
				}
			case "maxOpenConns":
				if cmd.Value.Valid {
					maxOpenConns, err := strconv.Atoi(cmd.Value.String)
					if err != nil {
						return fmt.Errorf("invalid value: %w", err)
					}
					filesConfig.Followers[followerIndex].MaxOpenConns = maxOpenConns
				} else {
					io.WriteString(cmd.Stdout, strconv.Itoa(fsConfig.MaxOpenConns)+"\n")
				}
			case "maxIdleConns":
				if cmd.Value.Valid {
					maxIdleConns, err := strconv.Atoi(cmd.Value.String)
					if err != nil {
						return fmt.Errorf("invalid value: %w", err)
					}
					filesConfig.Followers[followerIndex].MaxIdleConns = maxIdleConns
				} else {
					io.WriteString(cmd.Stdout, strconv.Itoa(fsConfig.MaxIdleConns)+"\n")
				}
			case "connMaxLifetime":
				if cmd.Value.Valid {
					filesConfig.Followers[followerIndex].ConnMaxLifetime = cmd.Value.String
				} else {
					io.WriteString(cmd.Stdout, fsConfig.ConnMaxLifetime+"\n")
				}
			case "connMaxIdleTime":
				if cmd.Value.Valid {
					filesConfig.Followers[followerIndex].ConnMaxIdleTime = cmd.Value.String
				} else {
					io.WriteString(cmd.Stdout, fsConfig.ConnMaxIdleTime+"\n")
				}
			default:
				io.WriteString(cmd.Stderr, filesHelp)
				return fmt.Errorf("%s.followers[%d]: invalid key %q", cmd.Key.String, followerIndex, tail)
			}
		}
		if cmd.Value.Valid {
			for last := len(filesConfig.Followers) - 1; last >= 0; last-- {
				if filesConfig.Followers[last].IsZero() {
					filesConfig.Followers = filesConfig.Followers[:last]
					continue
				}
				break
			}
			file, err := os.OpenFile(filepath.Join(cmd.ConfigDir, "files.json"), os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
			if err != nil {
				return err
			}
			defer file.Close()
			encoder := json.NewEncoder(file)
			encoder.SetIndent("", "  ")
			encoder.SetEscapeHTML(false)
			err = encoder.Encode(filesConfig)
			if err != nil {
				return err
			}
			err = file.Close()
			if err != nil {
				return err
			}
		}
	case "objects":
		b, err := os.ReadFile(filepath.Join(cmd.ConfigDir, "objects.json"))
		if err != nil && !errors.Is(err, fs.ErrNotExist) {
			return err
		}
		var objectsConfig ObjectsConfig
		if len(b) > 0 {
			decoder := json.NewDecoder(bytes.NewReader(b))
			decoder.DisallowUnknownFields()
			err = decoder.Decode(&objectsConfig)
			if err != nil && tail != "" {
				return fmt.Errorf("%s: %w", filepath.Join(cmd.ConfigDir, "objects.json"), err)
			}
		}
		switch tail {
		case "":
			if cmd.Value.Valid {
				var newObjectsConfig ObjectsConfig
				if cmd.Value.String != "" {
					decoder := json.NewDecoder(strings.NewReader(cmd.Value.String))
					decoder.DisallowUnknownFields()
					err := decoder.Decode(&newObjectsConfig)
					if err != nil {
						return err
					}
				}
				objectsConfig = newObjectsConfig
			} else {
				io.WriteString(cmd.Stderr, objectsHelp)
				encoder := json.NewEncoder(cmd.Stdout)
				encoder.SetIndent("", "  ")
				encoder.SetEscapeHTML(false)
				err := encoder.Encode(objectsConfig)
				if err != nil {
					return err
				}
			}
		case "provider":
			if cmd.Value.Valid {
				objectsConfig.Provider = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, objectsConfig.Provider+"\n")
			}
		case "filePath":
			if cmd.Value.Valid {
				objectsConfig.FilePath = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, objectsConfig.FilePath+"\n")
			}
		case "endpoint":
			if cmd.Value.Valid {
				objectsConfig.Endpoint = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, objectsConfig.Endpoint+"\n")
			}
		case "region":
			if cmd.Value.Valid {
				objectsConfig.Region = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, objectsConfig.Region+"\n")
			}
		case "bucket":
			if cmd.Value.Valid {
				objectsConfig.Bucket = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, objectsConfig.Bucket+"\n")
			}
		case "accessKeyID":
			if cmd.Value.Valid {
				objectsConfig.AccessKeyID = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, objectsConfig.AccessKeyID+"\n")
			}
		case "secretAccessKey":
			if cmd.Value.Valid {
				objectsConfig.SecretAccessKey = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, objectsConfig.SecretAccessKey+"\n")
			}
		default:
			io.WriteString(cmd.Stderr, objectsHelp)
			return fmt.Errorf("%s: invalid key %q", cmd.Key.String, tail)
		}
		if cmd.Value.Valid {
			file, err := os.OpenFile(filepath.Join(cmd.ConfigDir, "objects.json"), os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
			if err != nil {
				return err
			}
			defer file.Close()
			encoder := json.NewEncoder(file)
			encoder.SetIndent("", "  ")
			encoder.SetEscapeHTML(false)
			err = encoder.Encode(objectsConfig)
			if err != nil {
				return err
			}
			err = file.Close()
			if err != nil {
				return err
			}
		}
	case "captcha":
		b, err := os.ReadFile(filepath.Join(cmd.ConfigDir, "captcha.json"))
		if err != nil && !errors.Is(err, fs.ErrNotExist) {
			return err
		}
		var captchaConfig CaptchaConfig
		if len(b) > 0 {
			decoder := json.NewDecoder(bytes.NewReader(b))
			decoder.DisallowUnknownFields()
			err = decoder.Decode(&captchaConfig)
			if err != nil {
				return fmt.Errorf("%s: %w", filepath.Join(cmd.ConfigDir, "captcha.json"), err)
			}
		}
		if captchaConfig.CSP == nil {
			captchaConfig.CSP = make(map[string]string)
		}
		switch tail {
		case "":
			if cmd.Value.Valid {
				var newCaptchaConfig CaptchaConfig
				if cmd.Value.String != "" {
					decoder := json.NewDecoder(strings.NewReader(cmd.Value.String))
					decoder.DisallowUnknownFields()
					err := decoder.Decode(&newCaptchaConfig)
					if err != nil {
						return err
					}
				}
				captchaConfig = newCaptchaConfig
			} else {
				io.WriteString(cmd.Stderr, captchaHelp)
				encoder := json.NewEncoder(cmd.Stdout)
				encoder.SetIndent("", "  ")
				encoder.SetEscapeHTML(false)
				err := encoder.Encode(captchaConfig)
				if err != nil {
					return err
				}
			}
		case "widgetScriptSrc":
			if cmd.Value.Valid {
				captchaConfig.WidgetScriptSrc = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, captchaConfig.WidgetScriptSrc+"\n")
			}
		case "widgetClass":
			if cmd.Value.Valid {
				captchaConfig.WidgetClass = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, captchaConfig.WidgetClass+"\n")
			}
		case "verificationURL":
			if cmd.Value.Valid {
				captchaConfig.VerificationURL = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, captchaConfig.VerificationURL+"\n")
			}
		case "responseTokenName":
			if cmd.Value.Valid {
				captchaConfig.ResponseTokenName = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, captchaConfig.ResponseTokenName+"\n")
			}
		case "siteKey":
			if cmd.Value.Valid {
				captchaConfig.SiteKey = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, captchaConfig.SiteKey+"\n")
			}
		case "secretKey":
			if cmd.Value.Valid {
				captchaConfig.SecretKey = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, captchaConfig.SecretKey+"\n")
			}
		case "csp":
			if cmd.Value.Valid {
				var csp map[string]string
				if cmd.Value.String != "" {
					decoder := json.NewDecoder(strings.NewReader(cmd.Value.String))
					decoder.DisallowUnknownFields()
					err := decoder.Decode(&csp)
					if err != nil {
						return err
					}
				}
				captchaConfig.CSP = csp
			} else {
				encoder := json.NewEncoder(cmd.Stdout)
				encoder.SetIndent("", "  ")
				encoder.SetEscapeHTML(false)
				err := encoder.Encode(captchaConfig.CSP)
				if err != nil {
					return err
				}
			}
		default:
			io.WriteString(cmd.Stderr, captchaHelp)
			return fmt.Errorf("%s: invalid key %q", cmd.Key.String, tail)
		}
		if cmd.Value.Valid {
			file, err := os.OpenFile(filepath.Join(cmd.ConfigDir, "captcha.json"), os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
			if err != nil {
				return err
			}
			defer file.Close()
			encoder := json.NewEncoder(file)
			encoder.SetIndent("", "  ")
			encoder.SetEscapeHTML(false)
			err = encoder.Encode(captchaConfig)
			if err != nil {
				return err
			}
			err = file.Close()
			if err != nil {
				return err
			}
		}
	case "smtp":
		b, err := os.ReadFile(filepath.Join(cmd.ConfigDir, "smtp.json"))
		if err != nil && !errors.Is(err, fs.ErrNotExist) {
			return err
		}
		var smtpConfig SMTPConfig
		if len(b) > 0 {
			decoder := json.NewDecoder(bytes.NewReader(b))
			decoder.DisallowUnknownFields()
			err = decoder.Decode(&smtpConfig)
			if err != nil && tail != "" {
				return fmt.Errorf("%s: %w", filepath.Join(cmd.ConfigDir, "smtp.json"), err)
			}
		}
		switch tail {
		case "":
			if cmd.Value.Valid {
				var newSMTPConfig SMTPConfig
				if cmd.Value.String != "" {
					decoder := json.NewDecoder(strings.NewReader(cmd.Value.String))
					decoder.DisallowUnknownFields()
					err := decoder.Decode(&newSMTPConfig)
					if err != nil {
						return err
					}
				}
				smtpConfig = newSMTPConfig
			} else {
				io.WriteString(cmd.Stderr, smtpHelp)
				encoder := json.NewEncoder(cmd.Stdout)
				encoder.SetIndent("", "  ")
				err := encoder.Encode(smtpConfig)
				if err != nil {
					return err
				}
			}
		case "username":
			if cmd.Value.Valid {
				smtpConfig.Username = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, smtpConfig.Username+"\n")
			}
		case "password":
			if cmd.Value.Valid {
				smtpConfig.Password = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, smtpConfig.Password+"\n")
			}
		case "host":
			if cmd.Value.Valid {
				smtpConfig.Host = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, smtpConfig.Host+"\n")
			}
		case "port":
			if cmd.Value.Valid {
				smtpConfig.Port = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, smtpConfig.Port+"\n")
			}
		case "mailFrom":
			if cmd.Value.Valid {
				smtpConfig.MailFrom = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, smtpConfig.MailFrom+"\n")
			}
		case "replyTo":
			if cmd.Value.Valid {
				smtpConfig.ReplyTo = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, smtpConfig.ReplyTo+"\n")
			}
		case "limitInterval":
			if cmd.Value.Valid {
				smtpConfig.LimitInterval = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, smtpConfig.LimitInterval+"\n")
			}
		case "limitBurst":
			if cmd.Value.Valid {
				limitBurst, err := strconv.Atoi(cmd.Value.String)
				if err != nil {
					return fmt.Errorf("%s: %q is not an integer", cmd.Key.String, cmd.Value.String)
				}
				smtpConfig.LimitBurst = limitBurst
			} else {
				io.WriteString(cmd.Stdout, strconv.Itoa(smtpConfig.LimitBurst)+"\n")
			}
		default:
			io.WriteString(cmd.Stderr, smtpHelp)
			return fmt.Errorf("%s: invalid key %q", cmd.Key.String, tail)
		}
		if cmd.Value.Valid {
			file, err := os.OpenFile(filepath.Join(cmd.ConfigDir, "smtp.json"), os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
			if err != nil {
				return err
			}
			defer file.Close()
			encoder := json.NewEncoder(file)
			encoder.SetIndent("", "  ")
			err = encoder.Encode(smtpConfig)
			if err != nil {
				return err
			}
			err = file.Close()
			if err != nil {
				return err
			}
		}
	case "proxy":
		b, err := os.ReadFile(filepath.Join(cmd.ConfigDir, "proxy.json"))
		if err != nil && !errors.Is(err, fs.ErrNotExist) {
			return err
		}
		var proxyConfig ProxyConfig
		proxyConfig.RealIPHeaders = map[string]string{}
		proxyConfig.ProxyIPs = []string{}
		if len(b) > 0 {
			decoder := json.NewDecoder(bytes.NewReader(b))
			decoder.DisallowUnknownFields()
			err = decoder.Decode(&proxyConfig)
			if err != nil && tail != "" {
				return fmt.Errorf("%s: %w", filepath.Join(cmd.ConfigDir, "proxy.json"), err)
			}
		}
		switch tail {
		case "":
			if cmd.Value.Valid {
				var newProxyConfig ProxyConfig
				if cmd.Value.String != "" {
					decoder := json.NewDecoder(strings.NewReader(cmd.Value.String))
					decoder.DisallowUnknownFields()
					err := decoder.Decode(&newProxyConfig)
					if err != nil {
						return err
					}
				}
				proxyConfig = newProxyConfig
			} else {
				io.WriteString(cmd.Stderr, proxyHelp)
				encoder := json.NewEncoder(cmd.Stdout)
				encoder.SetIndent("", "  ")
				encoder.SetEscapeHTML(false)
				err := encoder.Encode(proxyConfig)
				if err != nil {
					return err
				}
			}
		case "realIPHeaders":
			if cmd.Value.Valid {
				var newRealIPHeaders map[string]string
				if cmd.Value.String != "" {
					decoder := json.NewDecoder(strings.NewReader(cmd.Value.String))
					decoder.DisallowUnknownFields()
					err := decoder.Decode(&newRealIPHeaders)
					if err != nil {
						return err
					}
				}
				proxyConfig.RealIPHeaders = newRealIPHeaders
			} else {
				encoder := json.NewEncoder(cmd.Stdout)
				encoder.SetIndent("", "  ")
				encoder.SetEscapeHTML(false)
				err := encoder.Encode(proxyConfig.RealIPHeaders)
				if err != nil {
					return err
				}
			}
		case "proxies":
			if cmd.Value.Valid {
				var newProxyIPs []string
				if cmd.Value.String != "" {
					decoder := json.NewDecoder(strings.NewReader(cmd.Value.String))
					decoder.DisallowUnknownFields()
					err := decoder.Decode(&newProxyIPs)
					if err != nil {
						return err
					}
				}
				proxyConfig.ProxyIPs = newProxyIPs
			} else {
				encoder := json.NewEncoder(cmd.Stdout)
				encoder.SetIndent("", "  ")
				encoder.SetEscapeHTML(false)
				err := encoder.Encode(proxyConfig.ProxyIPs)
				if err != nil {
					return err
				}
			}
		default:
			io.WriteString(cmd.Stderr, proxyHelp)
			return fmt.Errorf("%s: invalid key %q", cmd.Key.String, tail)
		}
		if cmd.Value.Valid {
			file, err := os.OpenFile(filepath.Join(cmd.ConfigDir, "proxy.json"), os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
			if err != nil {
				return err
			}
			defer file.Close()
			encoder := json.NewEncoder(file)
			encoder.SetIndent("", "  ")
			encoder.SetEscapeHTML(false)
			err = encoder.Encode(proxyConfig)
			if err != nil {
				return err
			}
			err = file.Close()
			if err != nil {
				return err
			}
		}
	case "dns":
		b, err := os.ReadFile(filepath.Join(cmd.ConfigDir, "dns.json"))
		if err != nil && !errors.Is(err, fs.ErrNotExist) {
			return err
		}
		var dnsConfig DNSConfig
		if len(b) > 0 {
			decoder := json.NewDecoder(bytes.NewReader(b))
			decoder.DisallowUnknownFields()
			err = decoder.Decode(&dnsConfig)
			if err != nil && tail != "" {
				return fmt.Errorf("%s: %w", filepath.Join(cmd.ConfigDir, "dns.json"), err)
			}
		}
		switch tail {
		case "":
			if cmd.Value.Valid {
				var newDNSConfig DNSConfig
				if cmd.Value.String != "" {
					decoder := json.NewDecoder(strings.NewReader(cmd.Value.String))
					decoder.DisallowUnknownFields()
					err := decoder.Decode(&newDNSConfig)
					if err != nil {
						return err
					}
				}
				dnsConfig = newDNSConfig
			} else {
				io.WriteString(cmd.Stderr, dnsHelp)
				encoder := json.NewEncoder(cmd.Stdout)
				encoder.SetIndent("", "  ")
				encoder.SetEscapeHTML(false)
				err := encoder.Encode(dnsConfig)
				if err != nil {
					return err
				}
			}
		case "provider":
			if cmd.Value.Valid {
				dnsConfig.Provider = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, dnsConfig.Provider+"\n")
			}
		case "username":
			if cmd.Value.Valid {
				dnsConfig.Username = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, dnsConfig.Username+"\n")
			}
		case "apiKey":
			if cmd.Value.Valid {
				dnsConfig.APIKey = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, dnsConfig.APIKey+"\n")
			}
		case "apiToken":
			if cmd.Value.Valid {
				dnsConfig.APIToken = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, dnsConfig.APIToken+"\n")
			}
		case "secretKey":
			if cmd.Value.Valid {
				dnsConfig.SecretKey = cmd.Value.String
			} else {
				io.WriteString(cmd.Stdout, dnsConfig.SecretKey+"\n")
			}
		default:
			io.WriteString(cmd.Stderr, dnsHelp)
			return fmt.Errorf("%s: invalid key %q", cmd.Key.String, tail)
		}
		if cmd.Value.Valid {
			file, err := os.OpenFile(filepath.Join(cmd.ConfigDir, "dns.json"), os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
			if err != nil {
				return err
			}
			defer file.Close()
			encoder := json.NewEncoder(file)
			encoder.SetIndent("", "  ")
			encoder.SetEscapeHTML(false)
			err = encoder.Encode(dnsConfig)
			if err != nil {
				return err
			}
			err = file.Close()
			if err != nil {
				return err
			}
		}
	case "certmagic":
		if cmd.Value.Valid {
			err := os.WriteFile(filepath.Join(cmd.ConfigDir, "certmagic.txt"), []byte(cmd.Value.String), 0644)
			if err != nil {
				return err
			}
		} else {
			b, err := os.ReadFile(filepath.Join(cmd.ConfigDir, "certmagic.txt"))
			if err != nil && !errors.Is(err, fs.ErrNotExist) {
				return err
			}
			io.WriteString(cmd.Stdout, string(bytes.TrimSpace(b))+"\n")
		}
	default:
		io.WriteString(cmd.Stderr, configHelp)
		return fmt.Errorf("%s: invalid key %q", cmd.Key.String, head)
	}
	return nil
}

const databaseHelp = `# == database keys == #
# Refer to ` + "`notebrew config`" + ` on how to get and set config values.
# dialect         - Database dialect (possible values: sqlite, postgres, mysql).
# filePath        - File path to the sqlite file (if dialect is sqlite).
# user            - Database user.
# password        - Database password.
# host            - Database host.
# port            - Database port.
# dbName          - Database name.
# params          - Database-specific connection parameters (see https://example.com for more info).
# maxOpenConns    - Max open connections to the database (0 means unset, default is unlimited).
# maxIdleConns    - Max idle connections to the database (0 means unset, default is 2).
# connMaxLifetime - Connection max lifetime. e.g. 5m, 10m30s
# connMaxIdleTime - Connection max idle time. e.g. 5m, 10m30s
`

type DatabaseConfig struct {
	Dialect         string            `json:"dialect"`
	FilePath        string            `json:"filePath"`
	User            string            `json:"user"`
	Password        string            `json:"password"`
	Host            string            `json:"host"`
	Port            string            `json:"port"`
	DBName          string            `json:"dbName"`
	Params          map[string]string `json:"params"`
	MaxOpenConns    int               `json:"maxOpenConns"`
	MaxIdleConns    int               `json:"maxIdleConns"`
	ConnMaxLifetime string            `json:"connMaxLifetime"`
	ConnMaxIdleTime string            `json:"connMaxIdleTime"`
}

const filesHelp = `# == files keys == #
# Choose between using a directory, database or sftp filesystem to store files.
# Refer to ` + "`notebrew config`" + ` on how to get and set config values.
# provider             - Files provider (possible values: directory, database, sftp).
# authenticationMethod - Authentication method for connecting to SFTP server (possible values: password, publickey).
# tempDir              - Temporary directory to store files in while they are being written (if using a directory or sftp).
# dialect              - Database dialect (possible values: sqlite, postgres, mysql).
# filePath             - Files root directory (if using a directory) or file path to the sqlite file (if using sqlite database) or remote root directory (if using SFTP).
# user                 - Database/SFTP user.
# password             - Database/SFTP password.
# host                 - Database/SFTP host.
# port                 - Database/SFTP port.
# dbName               - Database name.
# params               - Database-specific connection parameters (see https://example.com for more info).
# maxOpenConns         - Max open connections to the database/SFTP server (0 means unset, default is unlimited for the database and 1 for the SFTP server).
# maxIdleConns         - Max idle connections to the database (0 means unset, default is 2).
# connMaxLifetime      - Connection max lifetime. e.g. 5m, 10m30s (database only).
# connMaxIdleTime      - Connection max idle time. e.g. 5m, 10m30s (database only).
`

type FilesConfig struct {
	FSConfig
	Followers              []FSConfig `json:"followers"`
	SynchronousReplication bool       `json:"synchronousReplication"`
}

type FSConfig struct {
	Provider             string            `json:"provider"`
	AuthenticationMethod string            `json:"authenticationMethod"`
	TempDir              string            `json:"tempDir"`
	Dialect              string            `json:"dialect"`
	FilePath             string            `json:"filePath"`
	User                 string            `json:"user"`
	Password             string            `json:"password"`
	Host                 string            `json:"host"`
	Port                 string            `json:"port"`
	DBName               string            `json:"dbName"`
	Params               map[string]string `json:"params"`
	MaxOpenConns         int               `json:"maxOpenConns"`
	MaxIdleConns         int               `json:"maxIdleConns"`
	ConnMaxLifetime      string            `json:"connMaxLifetime"`
	ConnMaxIdleTime      string            `json:"connMaxIdleTime"`
}

func (c FSConfig) IsZero() bool {
	if c.Provider == "" &&
		c.AuthenticationMethod == "" &&
		c.TempDir == "" &&
		c.Dialect == "" &&
		c.FilePath == "" &&
		c.User == "" &&
		c.Password == "" &&
		c.Host == "" &&
		c.Port == "" &&
		c.DBName == "" &&
		len(c.Params) == 0 &&
		c.MaxOpenConns == 0 &&
		c.MaxIdleConns == 0 &&
		c.ConnMaxLifetime == "" &&
		c.ConnMaxIdleTime == "" {
		return true
	}
	return false
}

const objectsHelp = `# == objects keys == #
# Choose between using a directory or an S3-compatible provider to store objects. Only applicable if using the database filesytem (see ` + "`notebrew config files`" + `).
# Refer to ` + "`notebrew config`" + ` on how to get and set config values.
# provider        - Object storage provider (possible values: directory, s3).
# filePath        - Object storage directory filePath (if using a directory).
# endpoint        - Object storage provider endpoint (if using s3). e.g. https://s3.us-east-1.amazonaws.com, https://s3.us-west-004.backblazeb2.com
# region          - S3 region. e.g. us-east-1, us-west-004
# bucket          - S3 bucket.
# accessKeyID     - S3 access key ID.
# secretAccessKey - S3 secret access key.
`

type ObjectsConfig struct {
	Provider        string `json:"provider"`
	FilePath        string `json:"filePath"`
	Endpoint        string `json:"endpoint"`
	Region          string `json:"region"`
	Bucket          string `json:"bucket"`
	AccessKeyID     string `json:"accessKeyID"`
	SecretAccessKey string `json:"secretAccessKey"`
}

const captchaHelp = `# == captcha keys == #
# Refer to ` + "`notebrew config`" + ` on how to get and set config values.
# widgetScriptSrc   - Captcha widget's script src. e.g. https://js.hcaptcha.com/1/api.js, https://challenges.cloudflare.com/turnstile/v0/api.js
# widgetClass       - Captcha widget's container div class. e.g. h-captcha, cf-turnstile
# verificationURL   - Captcha verification URL to make POST requests to. e.g. https://api.hcaptcha.com/siteverify, https://challenges.cloudflare.com/turnstile/v0/siteverify
# responseTokenName - Captcha response token name. e.g. h-captcha-response, cf-turnstile-response
# siteKey           - Captcha site key.
# secretKey         - Captcha secret key.
# csp               - String-to-string mapping of Content-Security-Policy directive names to values for the captcha widget to work. e.g. {"script-src":"https://hcaptcha.com https://*.hcaptcha.com https://challenges.cloudflare.com","frame-src":"https://hcaptcha.com https://*.hcaptcha.com https://challenges.cloudflare.com","style-src":"https://hcaptcha.com https://*.hcaptcha.com","connect-src":"https://hcaptcha.com https://*.hcaptcha.com"}
`

type CaptchaConfig struct {
	WidgetScriptSrc   string            `json:"widgetScriptSrc"`
	WidgetClass       string            `json:"widgetClass"`
	VerificationURL   string            `json:"verificationURL"`
	ResponseTokenName string            `json:"responseTokenName"`
	SiteKey           string            `json:"siteKey"`
	SecretKey         string            `json:"secretKey"`
	CSP               map[string]string `json:"csp"`
}

type SMTPConfig struct {
	Username      string `json:"username"`
	Password      string `json:"password"`
	Host          string `json:"host"`
	Port          string `json:"port"`
	MailFrom      string `json:"mailFrom"`
	ReplyTo       string `json:"replyTo"`
	LimitInterval string `json:"limitInterval"`
	LimitBurst    int    `json:"limitBurst"`
}

const smtpHelp = `# == smtp keys == #
# username      - SMTP username.
# password      - SMTP password.
# host          - SMTP host.
# port          - SMTP port.
# mailFrom      - SMTP MAIL FROM address.
# replyTo       - SMTP Reply-To address.
# limitInterval - Interval for replenishing one token back to the rate limiter bucket. e.g 3m -> 480 emails per day, 5m -> 8760 emails per month, 1s -> 1 email per second (default is 3m)
# limitBurst    - Maximum tokens that can be held by the rate limiter bucket at any time. (default is 20)
`

const proxyHelp = `# == proxy keys == #
# Refer to ` + "`notebrew config`" + ` on how to get and set config values.
# realIPHeaders - String-to-string mapping of IP addresses to HTTP Headers which contain the real client IP.
# proxyIPs      - Array of proxy IP addresses.
`

type ProxyConfig struct {
	RealIPHeaders map[string]string `json:"realIPHeaders"`
	ProxyIPs      []string          `json:"proxyIPs"`
}

const dnsHelp = `# == dns keys == #
# Refer to ` + "`notebrew config`" + ` on how to get and set config values.
# provider  - DNS provider (possible values: namecheap, cloudflare, porkbun, godaddy).
# username  - DNS API username   (required by: namecheap).
# apiKey    - DNS API key        (required by: namecheap, porkbun).
# apiToken  - DNS API token      (required by: cloudflare, godaddy).
# secretKey - DNS API secret key (required by: porkbun).
`

type DNSConfig struct {
	Provider  string `json:"provider"`
	Username  string `json:"username"`
	APIKey    string `json:"apiKey"`
	APIToken  string `json:"apiToken"`
	SecretKey string `json:"secretKey"`
}
